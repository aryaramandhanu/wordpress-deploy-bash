#!/bin/bash

# Sync local wordpress development server with live production server
# Absolutely requires customization if your dir structure differs
# I'll fix this later.
# Requires ssh keys installed on prod for password-less login
# Requires Search Replace DB from here:
# https://github.com/interconnectit/Search-Replace-DB
# 
# htdocs/   (wordpress installation)
# sql/
# Search-Replace-DB-master/
# deploy
# deploy.cfg
#
# NOTE: This script enters the production database passwords on the production
#       server command line. This is not the safest practice in general, 
#       certainly not for shared servers.
#
# Uses rsync to sync files
# Runs mysqldump on db, backs up db, and runs search replace script
# Usage:
#   deploy push files go
#       deploy files to production (remove 'go' for dry run)
#   deploy push db go
#       deploy files to production (remove 'go' for dry run)
# Use deploy pull to pull from production to dev.

source ./deploy.cfg

if [ $# -eq 0 ]; then
    # no arguments passed in, show usage
    echo $ERRORSTRING;
elif [ $1 == "push" ]; then
    if [[ -z $2 ]]; then
        echo "Push what? [files or db]"
    elif [ $2 == "files" ]; then
        if [[ -z $3 ]]; then
            echo "Push files --dry-run. Use './deploy push files go' to execute."
            rsync --dry-run -arvuz --progress $DEVDIR $PRODUSER@$PRODSERVER:$PRODDIR $EXCLUDES $PRODUCTIONEXCLUDES
        elif [ $3 == "go" ]; then
            echo "Deploying files to production."
            rsync -arvuz --progress $DEVDIR $PRODUSER@$PRODSERVER:$PRODDIR $EXCLUDES $PRODUCTIONEXCLUDES
        fi
    elif [ $2 == "db" ]; then
        if [[ -z $3 ]]; then
            echo "Push DB dry run, back up. Use './deploy push db go' to execute."
            ssh $PRODUSER@$PRODSERVER "mysqldump -u $PRODDBUSER -p$PRODDBPASS $PRODDBNAME" > ./sql/PRODUCTION$(date +%Y%m%d_%H%M).sql
            echo "Remote DB backed up to ./sql/PRODUCTION$(date +%Y%m%d_%H%M).sql"
        elif [ $3 == "go" ]; then
            echo "Deploying database to production."
            echo "Backing up remote DB"
            ssh $PRODUSER@$PRODSERVER "mysqldump -u $PRODDBUSER -p$PRODDBPASS $PRODDBNAME" > ./sql/PRODUCTION$(date +%Y%m%d_%H%M).sql
            echo "Loading DEV DB into PRODUCTION DB"
            mysqldump -u $DEVDBUSER -p$DEVDBPASS $DEVDBNAME | ssh $PRODUSER@$PRODSERVER "mysql -u $PRODDBUSER -p$PRODDBPASS $PRODDBNAME"
            echo "Copying search replace scripts"
            scp ./Search-Replace-DB-master/searchreplacedb2cli.php ./Search-Replace-DB-master/searchreplacedb2.php $PRODUSER@$PRODSERVER:$PRODDIR
            echo "Running Search replace on production DB"
            # Heredoc to run multiple commands
            ssh $PRODUSER@$PRODSERVER <<SYNCITREMOTE
            $PRODDIR$SEARCHREPLACE -h $PRODSQLHOST -u $PRODDBUSER -p $PRODDBPASS -d $PRODDBNAME -c utf8 -s "$DEVSERVER" -r "$PRODSERVER"
            rm $PRODDIR$SEARCHREPLACE
            rm $PRODDIR$SEARCHREPLACEINC
SYNCITREMOTE
        fi
    fi
elif [ $1 == "pull" ]; then
    if [[ -z $2 ]]; then
        echo "Pull what? [files or db]"
    elif [ $2 == "files" ]; then
        if [[ -z $3 ]]; then
            echo "Pull files --dry-run. Use './deploy pull files go' to execute."
            rsync --dry-run -arvuz --progress $PRODUSER@$PRODSERVER:$PRODDIR $DEVDIR $EXCLUDES 
        elif [ $3 == "go" ]; then
            echo "Pulling files from production."
            rsync -arvuz --progress $PRODUSER@$PRODSERVER:$PRODDIR $DEVDIR $EXCLUDES 
        fi
    elif [ $2 == "db" ]; then
        if [[ -z $3 ]]; then
            echo "Pull DB dry run. Use './deploy pull db go' to execute."
            ssh $PRODUSER@$PRODSERVER "mysqldump -u $PRODDBUSER -p$PRODDBPASS $PRODDBNAME" > remote.sql
            echo "Production DB exported to remote.sql"
        elif [ $3 == "go" ]; then
            echo "Pulling database from production."
            ssh $PRODUSER@$PRODSERVER "mysqldump -u $PRODDBUSER -p$PRODDBPASS $PRODDBNAME" > remote.sql
            cp ./remote.sql ./sql/PRODUCTION$(date +%Y%m%d_%H%M).sql
            echo "Production backed up to ./sql/PRODUCTION$(date +%Y%m%d_%H%M).sql"
            mysqldump -u $DEVDBUSER -p$DEVDBPASS $DEVDBNAME > ./sql/DEV$(date +%Y%m%d_%H%M).sql
            echo "Development database backed up to sql/DEV$(date +%Y%m%d_%H%M).sql"
            echo "Loading remote/production DB into local dev DB"
            mysql -u $DEVDBUSER -p$DEVDBPASS $DEVDBNAME < remote.sql
            read -p "Press enter to run search-replace script or n<enter> to cancel." RESP
            if ["$RESP" = "n" ]; then
                echo "Done. Database loaded but not modified."
            else
                cp ./Search-Replace-DB-master/searchreplacedb2cli.php ./htdocs/
                cp ./Search-Replace-DB-master/searchreplacedb2.php ./htdocs/
                ./htdocs/searchreplacedb2cli.php -h $DEVSQLHOST -u $DEVDBUSER -p $DEVDBPASS -d $DEVDBNAME -c utf8 -s "$PRODSERVER" -r "$DEVSERVER"
                rm ./htdocs/searchreplacedb2cli.php
                rm ./htdocs/searchreplacedb2.php
            fi
            rm ./remote.sql
        fi
    fi
fi
